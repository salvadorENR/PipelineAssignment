# Importar las librerías necesarias
import pandas as pd
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Cargar los conjuntos de datos de entrenamiento y prueba (ajustar las rutas según sea necesario)
train_data = pd.read_csv('train.csv')  # Reemplazar con la ruta correcta
test_data = pd.read_csv('test.csv')    # Reemplazar con la ruta correcta

# Ingeniería de características
# Convertir 'time' a formato datetime
train_data['time'] = pd.to_datetime(train_data['time'])
test_data['time'] = pd.to_datetime(test_data['time'])

# Mostrar los tipos de datos de cada variable en el conjunto de datos de entrenamiento
print("Tipos de variables en el conjunto de datos de entrenamiento:")
print(train_data.dtypes)

# Mostrar los tipos de datos de cada variable en el conjunto de datos de prueba
print("\nTipos de variables en el conjunto de datos de prueba:")
print(test_data.dtypes)
#Rellenar los valores faltantes en 'object' con 'unknown' 
train_data['object'].fillna('unknown', inplace=True)
#Verificar si quedan valores faltantes 
print(train_data.isnull().sum())
#Ingeniería de características 
#Convertir 'time' a formato datetime
train_data['time'] = pd.to_datetime(train_data['time']) 
test_data['time'] = pd.to_datetime(test_data['time'])

#Característica 1: Número total de acciones por usuario (nivel de compromiso)
train_actions_per_user = train_data.groupby('enroll_id')['action'].count().reset_index(name='action_count')
test_actions_per_user = test_data.groupby('enroll_id')['action'].count().reset_index(name='action_count')

# Característica 2: Tiempo total de sesión por usuario
train_data['session_duration'] = train_data.groupby('session_id')['time'].transform(lambda x: (x.max() - x.min()).seconds)
test_data['session_duration'] = test_data.groupby('session_id')['time'].transform(lambda x: (x.max() - x.min()).seconds)

#Combinar las nuevas características creadas con los datos originales
train_data_final = pd.merge(train_data, train_actions_per_user, on='enroll_id')
test_data_final = pd.merge(test_data, test_actions_per_user, on='enroll_id')

# Calcular las estadísticas generales de action_count y session_duration
print(train_data_final[['action_count', 'session_duration']].describe())

#Gráfico de barras para la variable 'action'
plt.figure(figsize=(10, 6))
sns.countplot(y='action',
data=train_data, order=train_data['action'].value_counts().index)
plt.title('Distribución de Acciones Realizadas por los Usuarios')
plt.show()

#Mostrar valores únicos y conteos
for column in categorical_columns:
    print(f"Resumen de {column}:")
    print(train_data[column].value_counts())
    print("\n")

#Gráfico de barras para la variable objetivo 'truth'
sns.countplot(x='truth', data=train_data)
plt.title('Distribución de Abandonos (1) y No Abandonos (0)')
plt.show()
